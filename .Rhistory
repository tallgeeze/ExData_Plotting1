depart
nyc <- update(hours= 17, minutes = 34)
nyc <- update(nyc, hours= 17, minutes = 34)
update(nyc, hours= 17, minutes = 34)
depart <- depart(nyc, hours= 17, minutes = 34)
depart <- update(depart, hours= 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive , tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
interval(last_time, arrive)
interval(end = last_time, arrive)
?interval
how_long <- interval(last_time , arrive)
as.period(how_long)
stopwatch()
##########loading########
library(tidyr)
library(dplyr)
##########extracting data###########
train_set <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/train/X_train.txt")
train_label <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/train/y_train.txt")
test_set <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/test/X_test.txt")
test_label <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/test/y_test.txt")
########merge####################
data_set_temp1 <- data.frame("data_set" = train_set, "data_label"= train_label, "data_tag" = replicate("train", n = length(train_set)),stringsAsFactors = F)
data_set_temp2 <- data.frame("data_set" = test_set, "data_label"= test_label, "data_tag" = replicate("test", n = length(test_set)),stringsAsFactors = F)
#data_set <- merge.data.frame(x = data_set_temp1, y = data_set_temp2 )  #/*by= c("data_set","data_label","data_tag")*/
data_base <- rbind.data.frame(data_set_temp1, data_set_temp2)
##########calculating######
temp<-strsplit(data_base$data_set," ")
to_calculate<-temp[]
data_base$mean <- sapply(to_calculate[], function(x) mean(as.numeric(x), na.rm= T))
data_base$sd <- sapply (to_calculate[], function(x) sd(as.numeric(x),na.rm = T))
##########replace the status code with activity names###########
data_base$status <- gsub("1","WALKING",data_base$data_label)
data_base$status <- gsub("2","WALKING_UPSTAIRS",data_base$status)
data_base$status <- gsub("3","WALKING_DOWNSTAIRS",data_base$status)
data_base$status <- gsub("4","SITTING",data_base$status)
data_base$status <- gsub("5","STANDING",data_base$status)
data_base$status <- gsub("6","LAYING",data_base$status)
#########reshaping data& its name#########
tidy_data_set <- select(.data = data_base, c(mean,sd,status))
View(tidy_data_set)
tidy_data_set <- select(.data = data_base, c(mean,sd,status,data_tag))
View(tidy_data_set)
train_subject <-readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/train/subject_train")
train_subject <-readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/train/subject_train.txt")
View(train)subject
View(train_subject)
train_subject <-readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/train/subject_train.txt")
test_subject <-readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/test/subject_test.txt")
########merge####################
##########loading########
library(tidyr)
library(dplyr)
##########extracting data###########
train_set <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/train/X_train.txt")
train_label <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/train/y_train.txt")
test_set <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/test/X_test.txt")
test_label <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/test/y_test.txt")
train_subject <-readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/train/subject_train.txt")
test_subject <-readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/test/subject_test.txt")
########merge####################
data_set_temp1 <- data.frame("subject"= train_subject, "data_set" = train_set, "data_label"= train_label, "data_tag" = replicate("train", n = length(train_set)),stringsAsFactors = F)
data_set_temp2 <- data.frame("subject"= test_subject , "data_set" = test_set, "data_label"= test_label, "data_tag" = replicate("test", n = length(test_set)),stringsAsFactors = F)
data_base <- rbind.data.frame(data_set_temp1, data_set_temp2)
##########calculating######
temp<-strsplit(data_base$data_set," ")
to_calculate<-temp[]
data_base$mean <- sapply(to_calculate[], function(x) mean(as.numeric(x), na.rm= T))
data_base$sd <- sapply (to_calculate[], function(x) sd(as.numeric(x),na.rm = T))
##########replace the status code with activity names###########
data_base$status <- gsub("1","WALKING",data_base$data_label)
data_base$status <- gsub("2","WALKING_UPSTAIRS",data_base$status)
data_base$status <- gsub("3","WALKING_DOWNSTAIRS",data_base$status)
data_base$status <- gsub("4","SITTING",data_base$status)
data_base$status <- gsub("5","STANDING",data_base$status)
data_base$status <- gsub("6","LAYING",data_base$status)
#########reshaping data& its name#########
tidy_data_set <- select(.data = data_base, c(subject,mean,sd,status,data_tag))
View(tidy_data_set)
##########loading########
library(tidyr)
library(dplyr)
##########extracting data###########
train_set <- readLines("train/X_train.txt")
train_label <- readLines("train/y_train.txt")
test_set <- readLines("test/X_test.txt")
test_label <- readLines("test/y_test.txt")
train_subject <-readLines("train/subject_train.txt")
test_subject <-readLines("test/subject_test.txt")
#train_set <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/train/X_train.txt")
#train_label <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/train/y_train.txt")
#test_set <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/test/X_test.txt")
#test_label <- readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/test/y_test.txt")
#train_subject <-readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/train/subject_train.txt")
#test_subject <-readLines("C:/Users/tallg/Documents/GitHub/c3w4_as/UCI HAR Dataset/test/subject_test.txt")
########merge####################
data_set_temp1 <- data.frame("subject"= train_subject, "data_set" = train_set, "data_label"= train_label, "data_tag" = replicate("train", n = length(train_set)),stringsAsFactors = F)
data_set_temp2 <- data.frame("subject"= test_subject , "data_set" = test_set, "data_label"= test_label, "data_tag" = replicate("test", n = length(test_set)),stringsAsFactors = F)
data_base <- rbind.data.frame(data_set_temp1, data_set_temp2)
##########calculating######
temp<-strsplit(data_base$data_set," ")
to_calculate<-temp[]
data_base$mean <- sapply(to_calculate[], function(x) mean(as.numeric(x), na.rm= T))
data_base$sd <- sapply (to_calculate[], function(x) sd(as.numeric(x),na.rm = T))
##########replace the status code with activity names###########
data_base$status <- gsub("1","WALKING",data_base$data_label)
data_base$status <- gsub("2","WALKING_UPSTAIRS",data_base$status)
data_base$status <- gsub("3","WALKING_DOWNSTAIRS",data_base$status)
data_base$status <- gsub("4","SITTING",data_base$status)
data_base$status <- gsub("5","STANDING",data_base$status)
data_base$status <- gsub("6","LAYING",data_base$status)
#########reshaping data& its name#########
tidy_data_set <- select(.data = data_base, c(subject,mean,sd,status,data_tag))
View(tidy_data_set)
####                                               ####
#### tidy_data_set is the cleaned data set, which  ####
#### contains subject, mean of sensor data at each ####
#### observation and its standard diviation called ####
#### sd.  Status is  the  appropriate  label  of   ####
#### activities. data_tag is tag: train/test.      ####
######## thank you for your grading!     ##########
##########loading########
library(tidyr)
library(dplyr)
##########extracting data###########
train_set <- readLines("train/X_train.txt")
train_label <- readLines("train/y_train.txt")
test_set <- readLines("test/X_test.txt")
test_label <- readLines("test/y_test.txt")
train_subject <-readLines("train/subject_train.txt")
test_subject <-readLines("test/subject_test.txt")
########merge####################
data_set_temp1 <- data.frame("subject"= train_subject, "data_set" = train_set, "data_label"= train_label, "data_tag" = replicate("train", n = length(train_set)),stringsAsFactors = F)
data_set_temp2 <- data.frame("subject"= test_subject , "data_set" = test_set, "data_label"= test_label, "data_tag" = replicate("test", n = length(test_set)),stringsAsFactors = F)
data_base <- rbind.data.frame(data_set_temp1, data_set_temp2)
##########calculating######
temp<-strsplit(data_base$data_set," ")
to_calculate<-temp[]
data_base$mean <- sapply(to_calculate[], function(x) mean(as.numeric(x), na.rm= T))
data_base$sd <- sapply (to_calculate[], function(x) sd(as.numeric(x),na.rm = T))
##########replace the status code with activity names###########
data_base$status <- gsub("1","WALKING",data_base$data_label)
data_base$status <- gsub("2","WALKING_UPSTAIRS",data_base$status)
data_base$status <- gsub("3","WALKING_DOWNSTAIRS",data_base$status)
data_base$status <- gsub("4","SITTING",data_base$status)
data_base$status <- gsub("5","STANDING",data_base$status)
data_base$status <- gsub("6","LAYING",data_base$status)
#########reshaping data& its name#########
tidy_data_set <- select(.data = data_base, c(subject,mean,sd,status,data_tag))
View(tidy_data_set)
####                                               ####
#### tidy_data_set is the cleaned data set, which  ####
#### contains subject, mean of sensor data at each ####
#### observation and its standard diviation called ####
#### sd.  Status is  the  appropriate  label  of   ####
#### activities. data_tag is tag: train/test.      ####
######## thank you for your grading!     ##########
library(swirl)
install_from_swirl(Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col ="green")
rug(x = ppm)
rug(x= high)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
median(ppm, col = "magen", lwd = 4)
abline(median(ppm), col = "magen", lwd = 4)
abline(v= median(ppm), col = "magen", lwd = 4)
abline(v= median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(region)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg[1], col="wheat", main = "Number of Counties in Each Region" )
barplot(reg, col="wheat", main = "Number of Counties in Each Region" )
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow = c(2,1), mar = c(4,4,2,1))
east <- subset(pollution,region = "east" )
east <- subset(pollution,region == "east" )
head(east)
hsit(east, col = "green")
hist(east, col = "green")
hist(east$pm25, col = "green")
hist(subset(pollution, region=="west")$pm2.5, col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
with(pollution,plot(latitude~pm25))
with(pollution,plot(latitude,pm25))
abline(h=12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5,
| 4, 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main="West")
plot(west$latitude, west$pm25, main="East")
plot(east$latitude, east$pm25, main="East")
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
?Devices
d
faithful
with(faithful, plot(eruptions, waiting))
title(main ="Old Faithful Geyser data")
dev.cur()
pdf(file =""myplot.pdf)
pdf(file =myplot.pdf")
pdf(file ="myplot.pdf")
title(main ="Old Faithful Geyser data")
with(faithful, plot(eruptions, waiting))
title(main ="Old Faithful Geyser data")
dev.cur
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(device = "png", file = "geyserplot.png")
dev.copy(device = png, file = "geyserplot.png")
dev.close()
dev.off()
head(cars)
with(cars, plot(spped, dist))
with(cars, plot(speed, dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income,state,c(4,1))
xyplot(Life.Exp~Income|region,state,c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, mpg)
qplot(displ, hwy, mpg)
skip()
head(airquality)
range(airquality$Ozone, na.rm= T)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
box(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone(ppb)", col.axis = "blue", col.lab ="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
skip()
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
par( )
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, airquality$Month ==5)
may <- subset(airquality, Month ==5)
points(wind, ozone,col = "blue", pch = 1)
points()
points(may, col = "blue", lty = "solid")
points(may$Wind,may$Ozone , col = "blue", pch = 17)
notmay <- subset(airquality, Month !=5)
points(notmay$Wind, notmay$Ozone, col ="red", pch = 16)
points(notmay$Wind, notmay$Ozone, col ="red", pch = 8)
legend("topright", c(17,8), c("blue", ""red), c("May", "Other Months") )
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
lines(x = airquality$Wind, lty = 2)
abline( v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
.
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
title(main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot( airquality$Temp, airquality$Ozone,main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
damn bro
###Welcome to my assignment###
###thank u for reviewing###
R.version()
library(dplyr)
library(tidyr)
library(lubridate)
df_data <- read.table(file = "C:/Users/tallg/Documents/GitHub/R_learning/C3_W1/household_power_consumption.txt", header = F,skip = 1, sep = ";", stringsAsFactors = F,col.names = c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
converted_data <- mutate(df_data, time = as.POSIXct( strptime(Time,format =("%H:%M:%S"))), date = as.Date.character(x= df_data$Date, format="%d/%m/%y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
View(converted_data)
View(data_base)
View(df_data)
R.version()
library(dplyr)
library(tidyr)
library(lubridate)
df_data <- read.table(file = "C:/Users/tallg/Documents/GitHub/R_learning/C3_W1/household_power_consumption.txt", header = F,skip = 1, sep = ";", stringsAsFactors = F,col.names = c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
View(df_data)
?as.Date
trail <- as.Date("28-12-1997", format= "%d-%m-%y")
trail <- as.Date("28-12-1997", format= "%dd-%mm-%yyyy")
trail <- as.Date("28-12-1997", format= "%d-%m-%y")
trail <- as.Date("28:12:1997", format= "%d:%m:%y")
View(trail)
trail <- as.Date("28:12:2020", format= "%d:%m:%y")
trail <- as.Date("28:12:1900", format= "%d:%m:%y")
trail <- as.Date("28:12:1900", format= "%d:%m:%Y")
trail <- as.Date("28:12:1900", format= "%D:%M:%Y")
trail <- as.Date("28:12:1900", format= "%d:%m:%Y")
converted_data <- mutate(df_data, time = as.POSIXct( strptime(Time,format =("%H:%M:%S"))), date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
###Welcome to my assignment###
###thank u for reviewing###
R.version()
library(dplyr)
library(tidyr)
library(lubridate)
df_data <- read.table(file = "C:/Users/tallg/Documents/GitHub/R_learning/C3_W1/household_power_consumption.txt", header = F,skip = 1, sep = ";", stringsAsFactors = F,col.names = c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
converted_data <- mutate(df_data, time = as.POSIXct( strptime(Time,format =("%H:%M:%S"))), date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
View(data_base)
View(df_data)
converted_data <- mutate(df_data, time = as.POSIXct( strptime(Time,format =("%h:%m:%s"))), date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
View(data_base)
?strptime
converted_data <- mutate(df_data, time = as.POSIXct( strptime(Time)), date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
converted_data <- mutate(df_data, time = as.POSIXct( strptime(Time),format =("%H:%M:%S")), date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
View(data_base)
converted_data <- mutate(df_data, time = as.POSIXct( strptime(Time,format =("%H:%M:%S"))), date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
View(data_base)
converted_data <- mutate(df_data, time =  strptime(Time,format =("%H:%M:%S")), date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
View(data_base)
converted_data <- mutate(df_data, time =  strptime(Time,format =("%H:%M:%S"),tz = ""), date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
View(data_base)
View(data_base)
?strptimie
R.version()
library(dplyr)
library(tidyr)
library(lubridate)
?strptime
df_data <- read.table(file = "C:/Users/tallg/Documents/GitHub/R_learning/C3_W1/household_power_consumption.txt", header = F,skip = 1, sep = ";", stringsAsFactors = F,col.names = c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
converted_data <- mutate(df_data, time =  as.POSIXct(strptime(Time,format =("%T%H:%M:%S"))), date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
library(dplyr)
library(tidyr)
library(lubridate)
df_data <- read.table(file = "C:/Users/tallg/Documents/GitHub/R_learning/C3_W1/household_power_consumption.txt", header = F,skip = 1, sep = ";", stringsAsFactors = F,col.names = c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
converted_data <- mutate(df_data, time =  as.POSIXct(strptime(Time,format =("%T%H:%M:%S"))), date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
View(data_base)
View(converted_data)
converted_data <- mutate(df_data, time =  as.POSIXct(strptime(Time,format =("%T%H:%M:%S"))), date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
###data_base is the converted by strptime(), as.Date())
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
View(converted_data$time)
###Welcome to my assignment###
###thank u for reviewing###
library(dplyr)
library(tidyr)
library(datasets)
library(lubridate)
library(ggplot2)
df_data <- read.table(file = "C:/Users/tallg/Documents/GitHub/R_learning/C3_W1/household_power_consumption.txt", header = F,skip = 1, sep = ";", stringsAsFactors = F,col.names = c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
###############
###############
converted_data <- mutate(df_data, time = hms(Time)  , date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
###############
###############
selected_data <- filter(.data = data_base , date[]== c(date("2007-02-01"), date("2007-02-02")))
##############
##############
with(selected_data, hist(x= as.numeric(Global_active_power),col = "red",main = "Global Active Power", xlab = "Global Acitive Power(kilowatts)"))
png(filename = "plot1.png", width = 480, height = 480)
dev.copy(png, file = "plot1.png")
dev.off()
#############
with(selected_data, plot(x= date + time, y = as.numeric(Global_active_power), type = "l" , ylab = "Global Acitive Power(kilowatts)", xlab = ""))
png(filename = "plot2.png", width = 480, height = 480)
dev.copy(png, file = "plot2.png")
dev.off()
############
with(selected_data, plot(x= date + time, y = as.numeric(Sub_metering_1),col = "black", type = "l" , ylab = "Energy sub metering", xlab = ""))
with(selected_data, lines(x = date + time , y = as.numeric(Sub_metering_2),col = "red"))
with(selected_data, lines(x = date + time , y = as.numeric(Sub_metering_3),col = "blue"))
png(filename = "plot3.png", width = 480, height = 480)
dev.copy(png, file = "plot3.png")
dev.off()
###########
?par
###Welcome to my assignment###
###thank u for reviewing###
library(dplyr)
library(tidyr)
library(datasets)
library(lubridate)
library(ggplot2)
df_data <- read.table(file = "C:/Users/tallg/Documents/GitHub/R_learning/C3_W1/household_power_consumption.txt", header = F,skip = 1, sep = ";", stringsAsFactors = F,col.names = c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
###############
###############
converted_data <- mutate(df_data, time = hms(Time)  , date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
###############
###############
selected_data <- filter(.data = data_base , date[]== c(date("2007-02-01"), date("2007-02-02")))
##############
##############
par(mfrow = c(1,1))
with(selected_data, hist(x= as.numeric(Global_active_power),col = "red",main = "Global Active Power", xlab = "Global Acitive Power(kilowatts)"))
png(filename = "plot1.png", width = 480, height = 480)
dev.copy(png, file = "plot1.png")
dev.off()
#############
with(selected_data, plot(x= date + time, y = as.numeric(Global_active_power), type = "l" , ylab = "Global Acitive Power(kilowatts)", xlab = ""))
png(filename = "plot2.png", width = 480, height = 480)
dev.copy(png, file = "plot2.png")
dev.off()
############
with(selected_data, plot(x= date + time, y = as.numeric(Sub_metering_1),col = "black", type = "l" , ylab = "Energy sub metering", xlab = ""))
with(selected_data, lines(x = date + time , y = as.numeric(Sub_metering_2),col = "red"))
with(selected_data, lines(x = date + time , y = as.numeric(Sub_metering_3),col = "blue"))
png(filename = "plot3.png", width = 480, height = 480)
dev.copy(png, file = "plot3.png")
dev.off()
###########
par(mfrow = c(2,2))
with(selected_data, plot( x = date + time , y = as.numeric(Global_active_power), ylab = "Global Acitve Power"))
with(selected_data, plot( x = date + time , y = as.numeric(Voltage), ylab = "Voltage"))
with(selected_data, plot(x= date + time, y = as.numeric(Sub_metering_1),col = "black", type = "l" , ylab = "Energy sub metering", xlab = ""))
with(selected_data, lines(x = date + time , y = as.numeric(Sub_metering_2),col = "red"))
with(selected_data, lines(x = date + time , y = as.numeric(Sub_metering_3),col = "blue"))
with(selected_data, plot( x = date + time , y = as.numeric(Global_reactive_power), ylab = "Global_reactive_power"), xlab = "datetime")
png(filename = "plot4.png",width = 480, height = 480)
dev.copy(png, file = "plot4.png")
dev.off()
par(mfrow = c(2,2))
with(selected_data, plot( x = date + time , y = as.numeric(Global_active_power), ylab = "Global Acitve Power",type = "l"))
with(selected_data, plot( x = date + time , y = as.numeric(Voltage), ylab = "Voltage",type = "l"))
with(selected_data, plot(x= date + time, y = as.numeric(Sub_metering_1),col = "black", type = "l" , ylab = "Energy sub metering", xlab = ""))
with(selected_data, lines(x = date + time , y = as.numeric(Sub_metering_2),col = "red"))
with(selected_data, lines(x = date + time , y = as.numeric(Sub_metering_3),col = "blue"))
with(selected_data, plot( x = date + time , y = as.numeric(Global_reactive_power), ylab = "Global_reactive_power",type = "l", xlab = "datetime"))
png(filename = "plot4.png",width = 480, height = 480)
dev.copy(png, file = "plot4.png")
dev.off()
setwd("~/GitHub/ExData_Plotting1")
###Welcome to my assignment###
###thank u for reviewing###
library(dplyr)
library(tidyr)
library(datasets)
library(lubridate)
library(ggplot2)
df_data <- read.table(file = "C:/Users/tallg/Documents/GitHub/R_learning/C3_W1/household_power_consumption.txt", header = F,skip = 1, sep = ";", stringsAsFactors = F,col.names = c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
###############
###############
converted_data <- mutate(df_data, time = hms(Time)  , date = as.Date.character(x= df_data$Date, format="%d/%m/%Y" ))
data_base <- select(converted_data, c("date","time","Global_active_power","Global_reactive_power","Voltage","Global_intensity","Sub_metering_1","Sub_metering_2","Sub_metering_3"))
###############
###############
selected_data <- filter(.data = data_base , date[]== c(date("2007-02-01"), date("2007-02-02")))
############
with(selected_data, plot(x= date + time, y = as.numeric(Sub_metering_1),col = "black", type = "l" , ylab = "Energy sub metering", xlab = ""))
with(selected_data, lines(x = date + time , y = as.numeric(Sub_metering_2),col = "red"))
with(selected_data, lines(x = date + time , y = as.numeric(Sub_metering_3),col = "blue"))
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
dev.copy(png, file = "plot3.png")
dev.off()
